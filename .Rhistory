learning2014$Attitude <- as.character()
learning2014$Attitude <- as.character(learning2014$attitude1)
learning2014 <- read.csv(file = "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt"", sep = "," , header = TRUE)
learning2014 <- read.csv(file = "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep = "," , header = TRUE)
str(learning2014)
dim(learning2014)
pairs(learning2014[-1])
pairs(learning2014[-1], col= learning2014$gender)
library(GGally)
library(ggplot2)
p <- ggpairs(learning2014, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
summary(learning2014$gender)
summary(learning2014$age)
summary(learning2014$attitude)
character(learning2014$attitude)
summary(learning2014$attitude)
summary(learning2014$Attitude)
summary(learning2014$Attitude)
learning2014 <- read.csv(file = "/Applications/IODS-project/data/learn2014.csv", sep = "," , header = TRUE, fill = TRUE, quote = "\"", dec = ".")
str(learning2014)
learning2014$X <- NULL
str(learning2014)
dim(learning2014)
pairs(learning2014[-1])
pairs(learning2014[-1], col= learning2014$gender)
library(GGally)
library(ggplot2)
p <- ggpairs(learning2014, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
summary(learning2014$gender)
summary(learning2014$Age)
summary(learning2014$Attitude)
learning2014$Attitude / 10
summary(learning2014$Attitude)
summary(learning2014$Attitude)
learning2014$Attitude / 10
summary(learning2014$Attitude)
learning2014$attitude <- learning2014$Attitude / 10
summary(learning2014$attitude)
summary(learning2014$deep)
summary(learning2014$deep)
summary(learning2014$stra)
summary(learning2014$surf)
dim(learning2014$deep)
str(learning2014$deep)
print(learning2014$deep)
print(learning2014$stra)
print(learning2014$surf)
summary(learning2014$Points)
library(ggplot2)
p1 <- ggplot(learning2014, aes(x = learning2014$Attitude, y = learning2014$Points, col = learning2014$gender))
p2 <- p1 + geom_point()
p3 <- p2 + geom_smooth(method = "lm")
p4 <- p3 + ggtitle("Student's attitude versus exam points")
print(p4)
p5 <- ggplot(learning2014, aes(x = surf, y = Age, col = gender))
p6 <- p5 + geom_point()
p7 <- p6 + geom_smooth(method = "lm")
p8 <- p7 + ggtitle("Student's learning approach (surface) versus age")
p8
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
library(GGally)
library(ggplot2)
summary(learning2014$deep)
library(GGally)
library(ggplot2)
ggpairs(learning2014, lower = list(combo = wrap("facethist", bins = 20)))
ggpairs(learning2014, lower = list(combo = wrap("facethist", bins = 20)))
model1 <- lm(Points ~ Attitude + deep + Age, data = learning2014)
model1
model1 <- lm(Points ~ Attitude + deep + Age, data = learning2014)
model1
summary(model1)
model2 <- lm(Points ~ Attitude, data = learning2014)
summary(model2)
plot(model1, which = c(1,2,5), par(mfrow = c(2,2)))
plot(model2, which = c(1,2,5), par(mfrow = c(2,2)))
plot(model2, which = c(1,2,5), par(mfrow = c(2,2)))
plot(model2, which = c(1,2,5), par(mfrow = c(2,2)))
```{r child = "chapter2.Rmd"}
library(MASS)
data("Boston")
str(Boston)
dim(Boston)
summary(Boston)
pairs(Boston)
library(tidyverse)
install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
library(corrplot)
cor_matrix<-cor(Boston) %>% round(2)
print(cor_matrix)
plot(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos ="b", tl.ps = "d", tl.cex = 0.6)
boston_scaled <- scale(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
boston_scaled
summary(boston_scaled)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crim
test <- dplyr::select(test, -crim)
lda.fit <- lda(crim ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crim)
lda.arrows(lda.fit, myscale = 2)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 1, col = classes, pch = classes)
plot(lda.fit, dimen = 0.1, col = classes, pch = classes)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crim
test <- dplyr::select(test, -crim)
lda.fit <- lda(crim ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crim)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crim
test <- dplyr::select(test, -crim)
lda.fit <- lda(crim ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crim)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
correct_classes <- test$crim
test <- dplyr::select(test, -crim)
tests <- dplyr::select(test, -crim)
tests <- dplyr::select(test, -crime)
hd <- read.csv(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
dim(hd)
str(gii)
dim(gii)
summary(hd)
summary(gii)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F, sep = "," , header = TRUE)
str(hd)
dim(hd)
summary(hd)
str(hd)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F, sep = "." , header = TRUE)
str(hd)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F, sep = ";" , header = TRUE)
str(hd)
summary(hd)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F, sep = "" , header = TRUE)
str(hd)
summary(hd)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F, sep = "," , header = TRUE)
str(hd)
summary(hd)
summary(gii)
summary(hd)
str(hd)
hd$HDI.Rank <- hd$HDI
hd$HDI.Rank <- hd$RankHDI
hd$Human.Development.Index..HDI. <- hd$HDI
hd$Life.Expectancy.at.Birth <- hd$LifeExp
hd$Expected.Years.of.Education <- hd$educationExp
hd$Mean.Years.of.Education <- hd$educationMean
hd$Gross.National.Income..GNI..per.Capita <- hd$GNI
hd$GNI.per.Capita.Rank.Minus.HDI.Rank <- hd$GNIandHDI
str(hd)
dim(hd)
hd$HDI.Rank <- hd$RankHDI
hd$Human.Development.Index..HDI. <- hd$HDI
hd$Life.Expectancy.at.Birth <- hd$LifeExp
hd$Expected.Years.of.Education <- hd$educationExp
hd$Mean.Years.of.Education <- hd$educationMean
hd$Gross.National.Income..GNI..per.Capita <- hd$GNI
hd$GNI.per.Capita.Rank.Minus.HDI.Rank <- hd$GNIandHDI
hd
str(hd)
library(MASS)
data("Boston")
str(Boston)
dim(Boston)
str(Boston)
summary(Boston)
pairs(Boston)
library(tidyverse)
install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
cor_matrix<-cor(Boston) %>% round(2)
print(cor_matrix)
plot(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos ="b", tl.ps = "d", tl.cex = 0.6)
summary(boston_scaled)
summary(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
summary(scaled_crim)
scaled_crim <- boston_scaled$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
correct_classes <- test$crime
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.fit <- lda(crim ~ ., data = train)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crim)
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
correct_classes <- test$crime
tests <- dplyr::select(test, -crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
n <- nrow(boston_scaled)
n <- nrow(boston_scaled)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
table(crime)
data("Boston")
summary(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
library(MASS)
data('Boston')
summary(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
dist_eu <- dist(boston_scaled)
summary(dist_eu)
dist_eu <- dist(Boston)
library(MASS)
data('Boston')
summary(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
dist_eu <- dist(boston_scaled)
summary(dist_eu)
km <-kmeans(dist_eu, centers = 15)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 5)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 3)
pairs(Boston, col = km$cluster)
pairs(boston_scaled, col = km$cluster)
ggpairs(boston_scaled, col = km$cluster)
library(ggplot2)
ggpairs(boston_scaled, col = km$cluster)
require(GGally)
require(ggplot2)
ggpairs(boston_scaled, col = km$cluster)
library(MASS)
data("Boston")
str(Boston)
summary(Boston)
pairs(Boston)
pairs(Boston)
library(tidyverse)
install.packages("corrplot")
library(corrplot)
cor_matrix<-cor(Boston) %>% round(2)
print(cor_matrix)
print(cor_matrix)
plot(cor_matrix)
print(cor_matrix)
plot(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos ="b", tl.ps = "d", tl.cex = 0.6)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
library(MASS)
data('Boston')
summary(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
dist_eu <- dist(boston_scaled)
summary(dist_eu)
km <-kmeans(dist_eu, centers = 3)
pairs(boston_scaled, col = km$cluster)
km <-kmeans(dist_eu, centers = 5)
pairs(boston_scaled, col = km$cluster)
require(GGally)
require(ggplot2)
ggpairs(boston_scaled, col = km$cluster)
library(MASS)
data("Boston")
str(Boston)
dim(Boston)
summary(Boston)
pairs(Boston)
library(tidyverse)
install.packages("corrplot")
library(corrplot)
cor_matrix<-cor(Boston) %>% round(2)
print(cor_matrix)
plot(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos ="b", tl.ps = "d", tl.cex = 0.6)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
library(MASS)
data('Boston')
summary(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
dist_eu <- dist(boston_scaled)
summary(dist_eu)
km <-kmeans(dist_eu, centers = 3)
pairs(boston_scaled, col = km$cluster)
require(GGally)
require(ggplot2)
ggpairs(boston_scaled, col = km$cluster)
